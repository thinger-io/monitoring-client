name: CMake ARM

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  RASPBERRY: ON

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest


    steps:

    - uses: actions/checkout@v2
    - uses: pguyot/arm-runner-action@v1
      id: build_image
      with:
        commands: |
            sudo apt update && sudo apt -qqy upgrade
            sudo apt install -qqy gcc g++ cmake libssl-dev
            sudo apt install -qqy libjsoncpp1 libjsoncpp-dev
            cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DRASPBERRY=${{env.RASPBERRY}}
            cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -DRASPBERRY=${{env.RASPBERRY}}
    #- name: Install dependencies
    #  run: sudo apt install libjsoncpp1 libjsoncpp-dev

    #- uses: actions/checkout@v2

    #- name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
     # run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DRASPBERRY=${{env.RASPBERRY}}

    #- name: Build
      # Build your program with the given configuration
    #  run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -DRASPBERRY=${{env.RASPBERRY}}

    #- name: Test
    #  working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}
