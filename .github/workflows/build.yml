name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  MODULE: thinger_monitor
  BUILD_TYPE: Release
  OPENSSL_ROOT_DIR: /usr/lib/ssl

jobs:

  build_version:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get tag version ## TODO: might not work
      id : version
#      run: | # official regex for semantic version: https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
#        echo "build_version=`grep -oE '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?' run.sh | head -1`" >> $GITHUB_ENV
      #run: echo "build_version=`sed -n 's/.*BUILD_VERSION=//p' run.sh | cut -d " " -f1`" >> $GITHUB_ENV
      run: echo "::set-output name=version::`sed -n 's/.*BUILD_VERSION=//p' run.sh | cut -d " " -f1`"

  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    needs: build_version
    strategy:
      matrix:
        architecture: ["x86_64", "armv7m_eabi"]
    container:
      image: bautisflow/toolchains:musl_ssl_${{ matrix.architecture }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_VERSION=${{ needs.build_version.outputs.version }} -DCROSS=ON -DOPENSSL_ROOT_DIR=${{ env.OPENSSL_ROOT_DIR }} -DOPENSSL_LIBRARIES=${{ env.OPENSSL_ROOT_DIR }}
      run: cmake -B /build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBUILD_VERSION=${{ needs.build_version.outputs.version }} -DCROSS=ON -DOPENSSL_ROOT_DIR=${{ env.OPENSSL_ROOT_DIR }} -DOPENSSL_LIBRARIES=${{ env.OPENSSL_ROOT_DIR }} -DBIN_EXTENSION=${{ matrix.architecture }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build /build --config ${{ env.BUILD_TYPE }}

    #- run: mv ${{github.workspace}}/build/${{env.MODULE}} ${{github.workspace}}/build/${{env.arch}}
    - name: Upload build artifact
      uses: actions/upload-artifact@v2
      if: ${{ github.event_name == 'push' }}
      with:
        name: ${{ env.MODULE }}.${{ matrix.architecture }}
        path: /build/${{ env.MODULE }}.${{ matrix.architecture }}
        #path: ${{ github.workspace }}/build/${{ env.MODULE }}
        #path: ${{ github.workspace }}
        if-no-files-found: error
        retention-days: 1

  # Install and run

  upload_to_release:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [build_version, build]
    strategy:
      matrix:
        architecture: ["x86_64", "armv7m_eabi"]

    steps:

    #- name: Get upload url
    #  run: |
    #    upload_url=$(curl -sL https://api.github.com/repos/thinger-io/monitoring-client/releases/latest | jq -r '.upload_url')
    #    echo UPLOAD_URL=$upload_url >> $GITHUB_ENV
    #  shell: bash
    #
    - name: Download ${{ matrix.architecture }} binary
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.MODULE }}.${{ matrix.architecture }}

    - name: Check file existence
      run: |
        echo ". directory"
        pwd
        ls -la .
        echo "github workspace directory"
        ls -la ${{ github.workspace }}

    - name: Upload x86_64 binary to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ env.MODULE }}.${{ matrix.architecture }}
        tag: ${{ needs.build_version.outputs.version }}

    # TODO: if arm change name to arm


    #- name: Test
    #  working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #  run: ctest -C ${{env.BUILD_TYPE}}
